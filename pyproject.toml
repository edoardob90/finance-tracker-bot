[tool.poetry]
name = "finance-tracker-bot"
version = "2.0.0"
description = "A Telegram bot that helps you with your personal finances"
authors = ["edoardob90 <edoardob90@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
gspread = "^5.12.0"
python-dotenv = "^1.0.0"
python-telegram-bot = { extras = ["callback-data"], version = "^20.6" }
pytz = "^2023.3.post1"
python-dateutil = "^2.8.2"
attrs = "^23.1.0"
pydantic = "^2.4.2"
tiktoken = "^0.5.1"
openai = "^1.2.2"
tenacity = "^8.2.3"

[tool.poetry.group.dev.dependencies]
black = "^23.10.1"
pylint = "^3.0.2"
isort = "^5.12.0"
pytest = "^7.4.3"
flake8 = "^6.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
include = ["bot"]
exclude = ["bot/old/*.py"]

reportOptionalMemberAccess = "warning"
reportOptionalSubscript = "warning"
reportInvalidStringEscapeSequence = false

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = [".", "bot"]

[tool.git-cliff.changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project are documented in this file.\n
"""
# template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """<!-- generated by git-cliff -->"""

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactor" },
    { message = "^style", group = "Styling" },
    { message = "^test", group = "Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore", group = "Miscellaneous Tasks" },
    { body = ".*security", group = "Security" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
